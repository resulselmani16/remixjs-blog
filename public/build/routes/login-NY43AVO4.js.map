{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["import { json } from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport authenticator from \"~/services/auth.server\";\nimport { sessionStorage } from \"~/session.server\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    successRedirect: \"/posts/admin\",\n  });\n\n  const session = await sessionStorage.getSession(\n    request.headers.get(\"Cookie\")\n  );\n\n  const error = session.get(\"sessionErrorKey\");\n  return json<any>({ error });\n};\n\nexport const action: ActionFunction = async ({ request, context }) => {\n  const resp = await authenticator.authenticate(\"form\", request, {\n    successRedirect: \"/posts/admin\",\n    failureRedirect: \"/login\",\n    throwOnError: true,\n    context,\n  });\n  console.log(resp);\n  return resp;\n};\n\nexport default function LoginPage() {\n  const loaderData = useLoaderData();\n  console.log(loaderData);\n  return (\n    <div className=\"flex-col flex h-screen w-full items-center justify-center\">\n      <h1>Log in to continue</h1>\n      <Form method=\"post\">\n        <input type=\"email\" name=\"email\" placeholder=\"email\" required className=\"w-80 border border-slate-400 p-2 rounded\" /> <br />\n        <input\n          type=\"password\"\n          name=\"password\"\n          placeholder=\"password\"\n          autoComplete=\"current-password\"\n        />{\" \"}\n        <br />\n        <button>Sign In </button>\n      </Form>\n      <div>\n        {loaderData?.error ? <p>ERROR: {loaderData?.error?.message}</p> : null}\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAGA,kBAA0B;AAC1B,qBAA+B;AAJ/B;AA8Be,SAAR,YAA6B;AA9BpC;AA+BE,QAAM,aAAa,cAAc;AACjC,UAAQ,IAAI,UAAU;AACtB,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACb;AAAA,yDAAC;AAAA,QAAG;AAAA,SAAJ;AAAA;AAAA;AAAA;AAAA,aAAsB;AAAA,MACtB,mDAAC;AAAA,QAAK,QAAO;AAAA,QACX;AAAA,6DAAC;AAAA,YAAM,MAAK;AAAA,YAAQ,MAAK;AAAA,YAAQ,aAAY;AAAA,YAAQ,UAAQ;AAAA,YAAC,WAAU;AAAA,aAAxE;AAAA;AAAA;AAAA;AAAA,iBAAmH;AAAA,UAAE;AAAA,UAAC,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UAC1H,mDAAC;AAAA,YACC,MAAK;AAAA,YACL,MAAK;AAAA,YACL,aAAY;AAAA,YACZ,cAAa;AAAA,aAJf;AAAA;AAAA;AAAA;AAAA,iBAKA;AAAA,UAAG;AAAA,UACH,mDAAC,UAAD;AAAA;AAAA;AAAA;AAAA,iBAAI;AAAA,UACJ,mDAAC;AAAA,YAAO;AAAA,aAAR;AAAA;AAAA;AAAA;AAAA,iBAAgB;AAAA;AAAA,SATlB;AAAA;AAAA;AAAA;AAAA,aAUA;AAAA,MACA,mDAAC;AAAA,QACE,oDAAY,SAAQ,mDAAC;AAAA,UAAE;AAAA;AAAA,aAAQ,8CAAY,UAAZ,mBAAmB;AAAA;AAAA,WAA9B;AAAA;AAAA;AAAA;AAAA,eAAsC,IAAO;AAAA,SADpE;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA;AAAA,KAfF;AAAA;AAAA;AAAA;AAAA,SAgBA;AAEJ;",
  "names": []
}
