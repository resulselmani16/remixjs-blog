{
  "version": 3,
  "sources": ["../../../app/routes/login.tsx"],
  "sourcesContent": ["import { json } from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport { Form, useLoaderData } from \"@remix-run/react\";\nimport authenticator from \"~/services/auth.server\";\nimport { sessionStorage } from \"~/session.server\";\n\nexport const loader: LoaderFunction = async ({ request }) => {\n  await authenticator.isAuthenticated(request, {\n    successRedirect: \"/posts/admin\",\n  });\n\n  const session = await sessionStorage.getSession(\n    request.headers.get(\"Cookie\")\n  );\n\n  const error = session.get(\"sessionErrorKey\");\n  return json<any>({ error });\n};\n\nexport const action: ActionFunction = async ({ request, context }) => {\n  const resp = await authenticator.authenticate(\"form\", request, {\n    successRedirect: \"/posts/admin\",\n    failureRedirect: \"/login\",\n    throwOnError: true,\n    context,\n  });\n  console.log(resp);\n  return resp;\n};\n\nexport default function LoginPage() {\n  const loaderData = useLoaderData();\n  console.log(loaderData);\n  return (\n    <div className=\"flex h-screen w-full items-center justify-center\">\n      <div className=\"flex flex-col\">\n        <h1>Log in to continue</h1>\n        <Form method=\"post\">\n          <input type=\"email\" name=\"email\" placeholder=\"email\" required />\n          <input\n            type=\"password\"\n            name=\"password\"\n            placeholder=\"password\"\n            autoComplete=\"current-password\"\n          />\n          <button>Sign In </button>\n        </Form>\n        <div>\n          {loaderData?.error ? (\n            <p>ERROR: {loaderData?.error?.message}</p>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAGA,kBAA0B;AAC1B,qBAA+B;AAJ/B;AA8Be,SAAR,YAA6B;AA9BpC;AA+BE,QAAM,aAAa,cAAc;AACjC,UAAQ,IAAI,UAAU;AACtB,SACE,mDAAC;AAAA,IAAI,WAAU;AAAA,IACb,6DAAC;AAAA,MAAI,WAAU;AAAA,MACb;AAAA,2DAAC;AAAA,UAAG;AAAA,WAAJ;AAAA;AAAA;AAAA;AAAA,eAAsB;AAAA,QACtB,mDAAC;AAAA,UAAK,QAAO;AAAA,UACX;AAAA,+DAAC;AAAA,cAAM,MAAK;AAAA,cAAQ,MAAK;AAAA,cAAQ,aAAY;AAAA,cAAQ,UAAQ;AAAA,eAA7D;AAAA;AAAA;AAAA;AAAA,mBAA8D;AAAA,YAC9D,mDAAC;AAAA,cACC,MAAK;AAAA,cACL,MAAK;AAAA,cACL,aAAY;AAAA,cACZ,cAAa;AAAA,eAJf;AAAA;AAAA;AAAA;AAAA,mBAKA;AAAA,YACA,mDAAC;AAAA,cAAO;AAAA,eAAR;AAAA;AAAA;AAAA;AAAA,mBAAgB;AAAA;AAAA,WARlB;AAAA;AAAA;AAAA;AAAA,eASA;AAAA,QACA,mDAAC;AAAA,UACE,oDAAY,SACX,mDAAC;AAAA,YAAE;AAAA;AAAA,eAAQ,8CAAY,UAAZ,mBAAmB;AAAA;AAAA,aAA9B;AAAA;AAAA;AAAA;AAAA,iBAAsC,IACpC;AAAA,WAHN;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA;AAAA,OAhBF;AAAA;AAAA;AAAA;AAAA,WAiBA;AAAA,KAlBF;AAAA;AAAA;AAAA;AAAA,SAmBA;AAEJ;",
  "names": []
}
