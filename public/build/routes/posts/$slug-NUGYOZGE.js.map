{
  "version": 3,
  "sources": ["../../../../app/routes/posts/$slug.tsx"],
  "sourcesContent": ["import { redirect } from \"@remix-run/server-runtime\";\nimport type { LoaderFunction } from \"@remix-run/server-runtime\";\nimport { json } from \"@remix-run/node\";\nimport { Link, useLoaderData } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport { getPosts } from \"~/models/post.server\";\nimport type { Post } from \"~/models/post.server\";\nimport { deletePost, getPost } from \"~/models/post.server\";\nimport { marked } from \"marked\";\n\ntype LoaderData = { post: Post; html: string; posts: Post[] };\nexport const loader: LoaderFunction = async ({ params }) => {\n  const post = await getPost(params.slug || \"\");\n  const posts = await getPosts();\n  if (post?.slug === \"new\") {\n    deletePost(\"new\");\n  }\n  if (!post) {\n    return redirect(\"/posts\");\n  }\n  invariant(params.slug, `params.slug is required`);\n  invariant(post, `Post not found: ${params.slug}`);\n  const html = marked(post.markdown);\n  return json<LoaderData>({ post, html, posts });\n};\n\nexport default function PostSlug() {\n  const { post, html, posts } = useLoaderData();\n  const getNextItem = (slug: string) => {\n    for (var i = 0; i < posts.length; i++) {\n      if (posts[i].slug === slug) {\n        if(i == posts.length -1){\n          return posts[0]\n        }else {\n          return posts[i + 1];\n        }\n      }\n    }\n  };\n\n  return (\n    <>\n      <Link to={\"/posts\"}>\n        <button className=\"m-12 w-40 rounded bg-slate-400 p-2 text-white\">\n          &lt; Back to blogs\n        </button>\n      </Link>\n      <main className=\"mx-auto max-w-4xl\">\n        <h1 className=\"my-6 border-b-2 text-center text-3xl\">{post.title}</h1>\n        <div dangerouslySetInnerHTML={{ __html: html }} />\n      <Link to={`/posts/${getNextItem(post.slug).slug}`}>{getNextItem(post.slug).title}</Link>\n      </main>\n    </>\n  );\n}\n"],
  "mappings": ";;;;;;;;;;;;;;AAMA,kBAAyB;AAEzB,IAAAA,eAAoC;AARpC;AA2Be,SAAR,WAA4B;AACjC,QAAM,EAAE,MAAM,MAAM,MAAM,IAAI,cAAc;AAC5C,QAAM,cAAc,CAAC,SAAiB;AACpC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,KAAK;AACrC,UAAI,MAAM,GAAG,SAAS,MAAM;AAC1B,YAAG,KAAK,MAAM,SAAQ,GAAE;AACtB,iBAAO,MAAM;AAAA,QACf,OAAM;AACJ,iBAAO,MAAM,IAAI;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAEA,SACE;AAAA,IACE;AAAA,yDAAC;AAAA,QAAK,IAAI;AAAA,QACR,6DAAC;AAAA,UAAO,WAAU;AAAA,UAAgD;AAAA,WAAlE;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,SAHF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,MACA,mDAAC;AAAA,QAAK,WAAU;AAAA,QACd;AAAA,6DAAC;AAAA,YAAG,WAAU;AAAA,YAAwC,eAAK;AAAA,aAA3D;AAAA;AAAA;AAAA;AAAA,iBAAiE;AAAA,UACjE,mDAAC;AAAA,YAAI,yBAAyB,EAAE,QAAQ,KAAK;AAAA,aAA7C;AAAA;AAAA;AAAA;AAAA,iBAAgD;AAAA,UAClD,mDAAC;AAAA,YAAK,IAAI,UAAU,YAAY,KAAK,IAAI,EAAE;AAAA,YAAS,sBAAY,KAAK,IAAI,EAAE;AAAA,aAA3E;AAAA;AAAA;AAAA;AAAA,iBAAiF;AAAA;AAAA,SAHjF;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA;AAAA,KAVF;AAAA;AAAA;AAAA;AAAA,SAWA;AAEJ;",
  "names": ["import_post"]
}
