{
  "version": 3,
  "sources": ["../../../../../app/routes/posts/admin/$slug.tsx"],
  "sourcesContent": ["import type { LoaderFunction } from \"@remix-run/server-runtime\";\nimport { json } from \"@remix-run/node\";\nimport type { ActionFunction } from \"@remix-run/node\";\nimport {\n  Form,\n  useActionData,\n  useLoaderData,\n  useTransition,\n} from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport type { Post } from \"~/models/post.server\";\nimport { getPost } from \"~/models/post.server\";\nimport { marked } from \"marked\";\nimport { useState } from \"react\";\n\ntype LoaderData = { post: Post; html: string };\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  invariant(params.slug, `params.slug is required`);\n  const post = await getPost(params.slug || \"\");\n  invariant(post, `Post not found: ${params.slug}`);\n  const html = marked(post.markdown);\n  return json<LoaderData>({ post, html });\n};\n\ntype ActionData =\n  | {\n      title: null | string;\n      slug: null | string;\n      markdown: null | string;\n    }\n  | undefined;\n\nexport const action: ActionFunction = async ({ request }: { request: any }) => {\n  await new Promise((res) => setTimeout(res, 1000));\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const slug = formData.get(\"slug\");\n  const markdown = formData.get(\"markdown\");\n\n  const errors: ActionData = {\n    title: title ? null : \"Title is required\",\n    slug: slug ? null : \"Slug is required\",\n    markdown: markdown ? null : \"Markdown is required\",\n  };\n\n  const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\n\n  if (hasErrors) {\n    return json<ActionData>(errors);\n  }\n\n  invariant(typeof title === \"string\", \"title must be a string\");\n  invariant(typeof slug === \"string\", \"slug must be a string\");\n  invariant(typeof markdown === \"string\", \"markdown must be a string\");\n};\n\nexport default function AdminPost() {\n  const inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg`;\n  const transition = useTransition();\n  const isSaving = Boolean(transition.submission);\n  const [isEditMode, setIsEditMode] = useState(false);\n  const { post, html } = useLoaderData();\n  const [postTitle, setPostTitle] = useState(post.title);\n  const [postSlug, setPostSlug] = useState(post.slug);\n  const [postMarkdown, setPostMarkdown] = useState(post.markdown);\n  const errors = useActionData();\n\n  const handleSubmit = ({title, slug, markdown}: any) => {\n    post.title = title;\n    post.slug = slug;\n    post.markdown = markdown;\n  }\n\n  return (\n    <main className=\"mx-auto max-w-4xl\">\n      {isEditMode ? (\n        <Form onSubmit={() => handleSubmit()}>\n          <p>\n            <label htmlFor=\"\">\n              Post Title:\n              {errors?.title ? (\n                <em className=\"text-red-600\"> {errors.title}</em>\n              ) : null}\n              <input\n                type=\"text\"\n                name=\"title\"\n                value={postTitle}\n                onChange={(e) => setPostTitle(e.target.value)}\n                className={inputClassName}\n              />\n            </label>\n          </p>\n          <p>\n            <label htmlFor=\"\">\n              Post Slug:\n              {errors?.slug ? (\n                <em className=\"text-red-600\"> {errors.slug}</em>\n              ) : null}\n              <input\n                type=\"text\"\n                value={postSlug}\n                onChange={(e) => setPostSlug(e.target.value)}\n                name=\"slug\"\n                className={inputClassName}\n              />\n            </label>\n          </p>\n          <p>\n            <label htmlFor=\"markdown\">\n              Markdown:\n              {errors?.markdown ? (\n                <em className=\"text-red-600\"> {errors.markdown}</em>\n              ) : null}\n            </label>\n            <br />\n            <textarea\n              value={postMarkdown}\n              onChange={(e) => setPostMarkdown(e.target.value)}\n              name=\"markdown\"\n              id=\"markdown\"\n              rows={20}\n              className={`${inputClassName} font-mono`}\n            ></textarea>\n          </p>\n          <p className=\"text-right\">\n            <button\n              type=\"submit\"\n              className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400 disabled:bg-blue-300\"\n              disabled={isSaving}\n              onClick={() => setIsEditMode(false)}\n            >\n              {isSaving ? \"Saving...\" : \"Save Post\"}\n            </button>\n          </p>\n        </Form>\n      ) : (\n        <>\n          {\" \"}\n          <h1 className=\"my-6 text-left text-3xl\">{post.title}</h1>\n          <div dangerouslySetInnerHTML={{ __html: html }} />\n          <div className=\"flex-end flex w-full\">\n            <button\n              className=\"mx-4 w-40 rounded bg-yellow-500 py-2 text-white\"\n              onClick={() => setIsEditMode(true)}\n            >\n              Edit Post\n            </button>\n            <button className=\"mx-4 w-40 rounded bg-red-500 py-2 text-white\">\n              Delete Post\n            </button>\n          </div>\n        </>\n      )}\n    </main>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react"]
}
