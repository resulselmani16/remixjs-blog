{
  "version": 3,
  "sources": ["../../../../../app/routes/posts/admin/$slug.tsx"],
  "sourcesContent": ["import {\n  Form,\n  useActionData,\n  useLoaderData,\n  useTransition,\n} from \"@remix-run/react\";\nimport { redirect, json, Response } from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport {\n  createPost,\n  deletePost,\n  getPost,\n  updatePost,\n} from \"~/models/post.server\";\nimport type { Post } from \"~/models/post.server\";\nimport invariant from \"tiny-invariant\";\n\ntype LoaderData = { post?: Post };\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  if (params.slug === \"new\") {\n    return json<LoaderData>({});\n  }\n\n  const post = await getPost(params.slug || \"\");\n  if (!post) {\n    throw new Response(\"not found\", { status: 404 });\n  }\n  return json<LoaderData>({ post });\n};\n\ntype ActionData =\n  | {\n      title: null | string;\n      slug: null | string;\n      markdown: null | string;\n    }\n  | undefined;\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  invariant(params.slug, \"slug is required\");\n  await new Promise((res) => setTimeout(res, 1000));\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n  if (intent === \"delete\") {\n    await deletePost(params.slug);\n    return redirect(\"/posts/admin\");\n  }\n\n  const title = formData.get(\"title\");\n  const slug = formData.get(\"slug\");\n  const markdown = formData.get(\"markdown\");\n\n  const errors: ActionData = {\n    title: title ? null : \"Title is required\",\n    slug: slug ? null : \"Slug is required\",\n    markdown: markdown ? null : \"Markdown is required\",\n  };\n\n  const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\n\n  if (hasErrors) {\n    return json<ActionData>(errors);\n  }\n\n  invariant(typeof title === \"string\", \"title must be a string\");\n  invariant(typeof slug === \"string\", \"slug must be a string\");\n  invariant(typeof markdown === \"string\", \"markdown must be a string\");\n\n  if (params.slug === \"new\") {\n    await createPost({ title, slug, markdown });\n  } else {\n    await updatePost(params.slug, { title, slug, markdown });\n  }\n  return redirect(\"/posts/admin\");\n};\n\nconst inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg`;\n\nexport default function NewPost() {\n  const data = useLoaderData() as LoaderData;\n  const errors = useActionData();\n  const transition = useTransition();\n  const isCreating = transition.submission?.formData.get(\"intent\") === \"create\";\n  const isUpdating = transition.submission?.formData.get(\"intent\") === \"update\";\n  const isDeleting = transition.submission?.formData.get(\"intent\") === \"delete\";\n  const isNewPost = !data.post;\n\n  return (\n    <>\n    <button>\n      \n    </button>\n    <Form method=\"post\" key={data.post?.slug ?? \"new\"}>\n      <p>\n        <label>\n          Post Title:{\" \"}\n          {errors?.title ? (\n            <em className=\"text-red-600\">{errors.title}</em>\n          ) : null}\n          <input\n            type=\"text\"\n            name=\"title\"\n            className={inputClassName}\n            defaultValue={data.post?.title}\n          />\n        </label>\n      </p>\n      <p>\n        <label>\n          Post Slug:{\" \"}\n          {errors?.slug ? (\n            <em className=\"text-red-600\">{errors.slug}</em>\n          ) : null}\n          <input\n            type=\"text\"\n            name=\"slug\"\n            className={inputClassName}\n            defaultValue={data.post?.slug}\n          />\n        </label>\n      </p>\n      <p>\n        <label htmlFor=\"markdown\">\n          Markdown:{\" \"}\n          {errors?.markdown ? (\n            <em className=\"text-red-600\">{errors.markdown}</em>\n          ) : null}\n        </label>\n        <textarea\n          id=\"markdown\"\n          rows={20}\n          name=\"markdown\"\n          className={`${inputClassName} font-mono`}\n          defaultValue={data.post?.markdown}\n        />\n      </p>\n      <div className=\"flex justify-end gap-4\">\n        {isNewPost ? null : (\n          <button\n            type=\"submit\"\n            name=\"intent\"\n            value=\"delete\"\n            className=\"rounded bg-red-500 py-2 px-4 text-white hover:bg-red-600 focus:bg-red-400 disabled:bg-red-300\"\n            disabled={isDeleting}\n          >\n            {isDeleting ? \"Deleting...\" : \"Delete\"}\n          </button>\n        )}\n        <button\n          type=\"submit\"\n          name=\"intent\"\n          value={isNewPost ? \"create\" : \"update\"}\n          className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400 disabled:bg-blue-300\"\n          disabled={isCreating || isUpdating}\n        >\n          {isNewPost ? (isCreating ? \"Creating...\" : \"Create Post\") : null}\n          {isNewPost ? null : isUpdating ? \"Updating...\" : \"Update\"}\n        </button>\n      </div>\n    </Form>\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
