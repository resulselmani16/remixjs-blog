{
  "version": 3,
  "sources": ["../../../../../app/routes/posts/admin/$slug.tsx"],
  "sourcesContent": ["import {\n  Form,\n  useActionData,\n  useLoaderData,\n  useTransition,\n} from \"@remix-run/react\";\nimport { redirect, json } from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport {\n  createPost,\n  deletePost,\n  getPost,\n  updatePost,\n} from \"~/models/post.server\";\nimport invariant from \"tiny-invariant\";\nimport type { Post } from \"~/models/post.server\";\nimport authenticator from \"~/services/auth.server\";\ntype LoaderData = { post?: Post };\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n  if (params.slug === \"new\") {\n    return json<LoaderData>({});\n  }\n\n  const post = await getPost(params.slug || \"\");\n  if (!post) {\n    return redirect(\"/posts/admin\");\n  }\n  return json<LoaderData>({ post });\n};\n\ntype ActionData =\n  | {\n      title: null | string;\n      slug: null | string;\n      markdown: null | string;\n    }\n  | undefined;\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  invariant(params.slug, \"slug is required\");\n  invariant(params.slug === \"new\", \"you cannot add this slug\");\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n  if (intent === \"delete\") {\n    await deletePost(params.slug);\n    return redirect(\"/posts/admin\");\n  } else if (intent === \"cancel\") {\n    return redirect(\"/posts/admin\");\n  }\n\n  const title = formData.get(\"title\");\n  const slug = formData.get(\"slug\");\n  const markdown = formData.get(\"markdown\");\n\n  const errors: ActionData = {\n    title: title ? null : \"Title is required\",\n    slug: slug ? null : \"Cannot set slug\",\n    markdown: markdown ? null : \"Markdown is required\",\n  };\n\n  const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\n\n  if (hasErrors) {\n    return json<ActionData>(errors);\n  }\n\n  invariant(typeof title === \"string\", \"title must be a string\");\n  invariant(typeof slug === \"string\", \"slug must be a string\");\n  invariant(typeof markdown === \"string\", \"markdown must be a string\");\n\n  if (params.slug === \"new\") {\n    await createPost({ title, slug, markdown });\n  } else {\n    await updatePost(params.slug, { title, slug, markdown });\n  }\n  return redirect(\"/posts/admin\");\n};\n\nconst inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg`;\n\nexport default function NewPost() {\n  const data = useLoaderData() as LoaderData;\n  const errors = useActionData() as ActionData;\n  const transition = useTransition();\n  const isCreating = transition.submission?.formData.get(\"intent\") === \"create\";\n  const isUpdating = transition.submission?.formData.get(\"intent\") === \"update\";\n  const isDeleting = transition.submission?.formData.get(\"intent\") === \"delete\";\n  const isCancelling =\n    transition.submission?.formData.get(\"intent\") === \"cancel\";\n  const isNewPost = !data.post;\n\n  return (\n    <div className=\"mx-8\">\n      <Form method=\"post\" key={data.post?.slug ?? \"new\"}>\n        <div className=\"flex justify-between\">\n          <div>\n            <label>\n              Post Title:{\" \"}\n              {errors?.title ? (\n                <em className=\"text-red-600\">{errors.title}</em>\n              ) : null}\n              <input\n                type=\"text\"\n                name=\"title\"\n                className={inputClassName}\n                defaultValue={data.post?.title}\n              />\n            </label>\n          </div>\n          <div>\n            <label>\n              Post Slug:{\" \"}\n              {errors?.slug ? (\n                <em className=\"text-red-600\">{errors.slug}</em>\n              ) : null}\n              <input\n                type=\"text\"\n                name=\"slug\"\n                className={inputClassName}\n                defaultValue={data.post?.slug}\n              />\n            </label>\n          </div>\n        </div>\n        <div>\n          <label htmlFor=\"markdown\">\n            Markdown:{\" \"}\n            {errors?.markdown ? (\n              <em className=\"text-red-600\">{errors.markdown}</em>\n            ) : null}\n          </label>\n          <textarea\n            id=\"markdown\"\n            rows={20}\n            name=\"markdown\"\n            className={`${inputClassName} font-mono`}\n            defaultValue={data.post?.markdown}\n          />\n        </div>\n        <div className=\"flex justify-end gap-4\">\n          <button\n            type=\"submit\"\n            name=\"intent\"\n            value=\"cancel\"\n            className=\"rounded bg-yellow-500 py-2 px-4 text-white hover:bg-yellow-600 focus:bg-yellow-400 disabled:bg-yellow-300\"\n          >\n            {isCancelling ? \"Cancelling...\" : \"Cancel\"}\n          </button>\n          {isNewPost ? null : (\n            <button\n              type=\"submit\"\n              name=\"intent\"\n              value=\"delete\"\n              className=\"rounded bg-red-500 py-2 px-4 text-white hover:bg-red-600 focus:bg-red-400 disabled:bg-red-300\"\n              disabled={isDeleting}\n            >\n              {isDeleting ? \"Deleting...\" : \"Delete\"}\n            </button>\n          )}\n          <button\n            type=\"submit\"\n            name=\"intent\"\n            value={isNewPost ? \"create\" : \"update\"}\n            className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400 disabled:bg-blue-300\"\n            disabled={isCreating || isUpdating}\n          >\n            {isNewPost ? (isCreating ? \"Creating...\" : \"Create Post\") : null}\n            {isNewPost ? null : isUpdating ? \"Updating...\" : \"Update\"}\n          </button>\n        </div>\n      </Form>\n    </div>\n  );\n}\n"],
  "mappings": "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",
  "names": []
}
