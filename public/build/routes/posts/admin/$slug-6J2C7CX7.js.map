{
  "version": 3,
  "sources": ["../../../../../app/routes/posts/admin/$slug.tsx"],
  "sourcesContent": ["import type { LoaderFunction } from \"@remix-run/server-runtime\";\nimport { json } from \"@remix-run/node\";\nimport type { ActionFunction } from \"@remix-run/node\";\nimport { Form, useLoaderData, useTransition } from \"@remix-run/react\";\nimport invariant from \"tiny-invariant\";\n\nimport type { Post } from \"~/models/post.server\";\nimport { getPost } from \"~/models/post.server\";\nimport { marked } from \"marked\";\nimport { useState } from \"react\";\n\ntype LoaderData = { post: Post; html: string };\n\nexport const loader: LoaderFunction = async ({ params }) => {\n  invariant(params.slug, `params.slug is required`);\n  const post = await getPost(params.slug || \"\");\n  invariant(post, `Post not found: ${params.slug}`);\n  const html = marked(post.markdown);\n  return json<LoaderData>({ post, html });\n};\n\ntype ActionData =\n  | {\n      title: null | string;\n      slug: null | string;\n      markdown: null | string;\n    }\n  | undefined;\n\nexport const action: ActionFunction = async ({ request }: { request: any }) => {\n  await new Promise((res) => setTimeout(res, 1000));\n  const formData = await request.formData();\n  const title = formData.get(\"title\");\n  const slug = formData.get(\"slug\");\n  const markdown = formData.get(\"markdown\");\n\n  const transition = useTransition();\n  const isSaving = Boolean(transition.submission);\n  const errors: ActionData = {\n      title: title ? null : \"Title is required\",\n      slug: slug ? null : \"Slug is required\",\n      markdown: markdown ? null : \"Markdown is required\",\n    };\n    \n    const hasErrors = Object.values(errors).some(\n        (errorMessage) => errorMessage\n        );\n        \n        if (hasErrors) {\n            return json<ActionData>(errors);\n        }\n        \n        invariant(typeof title === \"string\", \"title must be a string\");\n        invariant(typeof slug === \"string\", \"slug must be a string\");\n        invariant(typeof markdown === \"string\", \"markdown must be a string\");\n        \n        const inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg`;\n        \n    }\n    export default function AdminPost() {\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst [isEditMode, setIsEditMode] = useState(false);\n// eslint-disable-next-line react-hooks/rules-of-hooks\nconst { post, html } = useLoaderData();\nreturn (\n      <main className=\"mx-auto max-w-4xl\">\n        {isEditMode ? (\n        //   <Form method=\"post\">\n        //     <p>\n        //       <label htmlFor=\"\">\n        //         Post Title:\n        //         {errors?.title ? (\n        //           <em className=\"text-red-600\"> {errors.title}</em>\n        //         ) : null}\n        //         <input type=\"text\" name=\"title\" className={inputClassName} />\n        //       </label>\n        //     </p>\n        //     <p>\n        //       <label htmlFor=\"\">\n        //         Post Slug:\n        //         {errors?.slug ? (\n        //           <em className=\"text-red-600\"> {errors.slug}</em>\n        //         ) : null}\n        //         <input type=\"text\" name=\"slug\" className={inputClassName} />\n        //       </label>\n        //     </p>\n        //     <p>\n        //       <label htmlFor=\"markdown\">\n        //         Markdown:\n        //         {errors?.markdown ? (\n        //           <em className=\"text-red-600\"> {errors.markdown}</em>\n        //         ) : null}\n        //       </label>\n        //       <br />\n        //       <textarea\n        //         name=\"markdown\"\n        //         id=\"markdown\"\n        //         rows={20}\n        //         className={`${inputClassName} font-mono`}\n        //       ></textarea>\n        //     </p>\n        //     <p className=\"text-right\">\n        //       <button\n        //         type=\"submit\"\n        //         className=\"rounded bg-blue-500 py-2 px-4 text-white hover:bg-blue-600 focus:bg-blue-400 disabled:bg-blue-300\"\n        //         disabled={isSaving}\n        //         onClick={() => setIsEditMode(false)}\n        //       >\n        //         {isSaving ? \"Saving...\" : \"Save Post\"}\n        //       </button>\n        //     </p>\n        //   </Form>\n        <h1>test</h1>\n        ) : (\n          <>\n            {\" \"}\n            {/* <h1 className=\"my-6 text-left text-3xl\">{post.title}</h1>\n            <div dangerouslySetInnerHTML={{ __html: html }} /> */}\n            <div className=\"flex-end flex w-full\">\n              <button className=\"mx-4 w-40 rounded bg-green-500\" onClick={() => setIsEditMode(true)}>\n                Edit Post\n              </button>\n              <button className=\"mx-4  w-40 rounded bg-red-500 py-2\">\n                Delete Post\n              </button>\n            </div>\n          </>\n        )}\n      </main>\n    );\n  };"],
  "mappings": ";;;;;;;;;;;;;;AAOA,kBAAwB;AAExB,IAAAA,gBAAyB;AATzB;AA2DmB,SAAR,YAA6B;AAExC,QAAM,CAAC,YAAY,aAAa,QAAI,wBAAS,KAAK;AAElD,QAAM,EAAE,MAAM,KAAK,IAAI,cAAc;AACrC,SACM,mDAAC;AAAA,IAAK,WAAU;AAAA,IACb,uBA8CD,mDAAC;AAAA,MAAG;AAAA,OAAJ;AAAA;AAAA;AAAA;AAAA,WAAQ,IAEN;AAAA,MACG;AAAA;AAAA,QAGD,mDAAC;AAAA,UAAI,WAAU;AAAA,UACb;AAAA,+DAAC;AAAA,cAAO,WAAU;AAAA,cAAiC,SAAS,MAAM,cAAc,IAAI;AAAA,cAAG;AAAA,eAAvF;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA,YACA,mDAAC;AAAA,cAAO,WAAU;AAAA,cAAqC;AAAA,eAAvD;AAAA;AAAA;AAAA;AAAA,mBAEA;AAAA;AAAA,WANF;AAAA;AAAA;AAAA;AAAA,eAOA;AAAA;AAAA,OAXF;AAAA;AAAA;AAAA;AAAA,WAYA;AAAA,KA7DJ;AAAA;AAAA;AAAA;AAAA,SA+DA;AAEJ;",
  "names": ["import_react"]
}
