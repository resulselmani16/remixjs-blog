{
  "version": 3,
  "sources": ["../../../../../app/routes/posts/admin/$slug.tsx"],
  "sourcesContent": ["import {\n  Form,\n  Link,\n  Links,\n  useActionData,\n  useLoaderData,\n  useParams,\n  useTransition,\n} from \"@remix-run/react\";\nimport { redirect, json } from \"@remix-run/node\";\nimport type {LinksFunction} from \"@remix-run/node\";\nimport type { ActionFunction, LoaderFunction } from \"@remix-run/node\";\nimport {\n  createPost,\n  deletePost,\n  getPost,\n  updatePost,\n} from \"~/models/post.server\";\nimport invariant from \"tiny-invariant\";\nimport type { Post } from \"~/models/post.server\";\nimport authenticator from \"~/services/auth.server\";\nimport { useState } from \"react\";\nimport { marked } from \"marked\";\nimport styles from \"./style.css\";\nexport const links: LinksFunction = () => {\n  return [\n    {\n      rel: \"stylesheet\",\n      href: styles,\n    },\n  ];\n};\ntype LoaderData = { post?: Post; html?: string };\n\nexport const loader: LoaderFunction = async ({ request, params }) => {\n  await authenticator.isAuthenticated(request, {\n    failureRedirect: \"/login\",\n  });\n  if (params.slug === \"new\") {\n    return json<LoaderData>({});\n  }\n\n  const post = await getPost(params.slug || \"\");\n  if (!post) {\n    return redirect(\"/posts/admin\");\n  }\n  const html = marked(post.markdown);\n  return json<LoaderData>({ post, html });\n};\n\ntype ActionData =\n  | {\n      title: null | string;\n      slug: null | string;\n      markdown: null | string;\n    }\n  | undefined;\n\nexport const action: ActionFunction = async ({ request, params }) => {\n  invariant(params.slug, \"slug is required\");\n  const formData = await request.formData();\n  const intent = formData.get(\"intent\");\n  if (intent === \"delete\") {\n    await deletePost(params.slug);\n    return redirect(\"/posts/admin\");\n  } else if (intent === \"cancel\") {\n    return redirect(\"/posts/admin\");\n  }\n\n  //returns values one by one\n  //to get all values - formData.getAll(); returns all data values\n  const title = formData.get(\"title\");\n  const slug = formData.get(\"slug\");\n  const markdown = formData.get(\"markdown\");\n\n  const errors: ActionData = {\n    title: title ? null : \"Title is required\",\n    slug:\n      slug && slug !== \"new\" ? null : \"Slug is required. Cannot set this slug\",\n    markdown: markdown ? null : \"Markdown is required\",\n  };\n\n  const hasErrors = Object.values(errors).some((errorMessage) => errorMessage);\n\n  if (hasErrors) {\n    return json<ActionData>(errors);\n  }\n\n  invariant(typeof title === \"string\", \"title must be a string\");\n  invariant(typeof slug === \"string\", \"slug must be a string\");\n  invariant(typeof markdown === \"string\", \"markdown must be a string\");\n\n  if (params.slug === \"new\") {\n    await createPost({ title, slug, markdown });\n  } else {\n    await updatePost(params.slug, { title, slug, markdown });\n  }\n  return redirect(\"/posts/admin\");\n};\n\nconst inputClassName = `w-full rounded border border-gray-500 px-2 py-1 text-lg`;\n\nexport default function NewPost() {\n  const [isEditMode, setIsEditMode] = useState(true);\n  const handleCreateNewPost = () => {\n    location.href = \"/posts/admin/new\";\n  };\n  const { post, html } = useLoaderData() as LoaderData;\n  const errors = useActionData() as ActionData;\n  const transition = useTransition();\n  const isCreating = transition.submission?.formData.get(\"intent\") === \"create\";\n  const isUpdating = transition.submission?.formData.get(\"intent\") === \"update\";\n  const isDeleting = transition.submission?.formData.get(\"intent\") === \"delete\";\n  const isNewPost = !post;\n  const urlParams = useParams();\n  const [title, setTitle] = useState(\"\");\n  const [slug, setSlug] = useState(\"\");\n  const [markdown, setMarkdown] = useState(\"\");\n  const [hasMargin, setHasMargin] = useState(true);\n  const [isValid, setIsValid] = useState(false);\n\n  const handleHover = () => {\n    if (title === \"\" || slug === \"\" || markdown === \"\") {\n      setHasMargin(!hasMargin);\n    }\n  };\n\n  if(title & slug & markdown)\n\n  return (\n    <>\n      <Links />\n      {isEditMode ? (\n        <div className=\"mx-8\">\n          <Form method=\"post\" key={post?.slug ?? \"new\"}>\n            <p>\n              Tip:{\" \"}\n              <em>\n                You've entered Edit mode. If the fields are empty but you want\n                to edit any post, just click on any post on the left and you\n                will be given access to edit the post.\n              </em>{\" \"}\n            </p>\n            <br />\n            <div>\n              <button\n                onClick={() => setIsEditMode(false)}\n                className=\"mb-2 mr-4 h-12 w-40 rounded bg-yellow-500 p-2 text-white hover:bg-yellow-600 focus:bg-yellow-400 disabled:bg-yellow-300\"\n              >\n                Quit edit mode\n              </button>\n              {urlParams.slug !== \"new\" ? (\n                <Link\n                  className=\"mt-4 w-40 rounded bg-green-600 p-2 text-white\"\n                  to=\"/posts/admin/new\"\n                >\n                  Create New Blog\n                </Link>\n              ) : null}\n            </div>\n            <br />\n            <div className=\"flex justify-between\">\n              <div>\n                <label>\n                  Post Title:\n                  {errors?.title ? (\n                    <em className=\"text-red-600\">{errors.title}</em>\n                  ) : null}\n                  <input\n                    onChange={(e) => setTitle(e.target.value)}\n                    type=\"text\"\n                    name=\"title\"\n                    className={inputClassName}\n                    defaultValue={post?.slug && post?.title}\n                  />\n                </label>\n              </div>\n              <div>\n                <label>\n                  Post Slug:\n                  {errors?.slug ? (\n                    <em className=\"text-red-600\">{errors.slug}</em>\n                  ) : null}\n                  <input\n                    onChange={(e) => setSlug(e.target.value)}\n                    type=\"text\"\n                    name=\"slug\"\n                    className={inputClassName}\n                    defaultValue={post?.slug && post?.slug}\n                  />\n                </label>\n              </div>\n            </div>\n            <div>\n              <label htmlFor=\"markdown\">\n                Markdown:\n                {errors?.markdown ? (\n                  <em className=\"text-red-600\">{errors.markdown}</em>\n                ) : null}\n              </label>\n              <textarea\n                onChange={(e) => setMarkdown(e.target.value)}\n                id=\"markdown\"\n                rows={20}\n                name=\"markdown\"\n                className={`${inputClassName} font-mono`}\n                defaultValue={post?.slug && post?.markdown}\n              />\n            </div>\n            <div className=\"flex justify-end gap-4\">\n              {isNewPost ? null : (\n                <button\n                  type=\"submit\"\n                  name=\"intent\"\n                  value=\"delete\"\n                  className=\"rounded bg-red-500 py-2 px-4 text-white hover:bg-red-600 focus:bg-red-400 disabled:bg-red-300\"\n                  disabled={isDeleting}\n                >\n                  {isDeleting ? \"Deleting...\" : \"Delete\"}\n                </button>\n              )}\n              <button\n                type=\"submit\"\n                onMouseOver={() => isNewPost ? handleHover() : () => {}}\n                name=\"intent\"\n                value={isNewPost ? \"create\" : \"update\"}\n                className={`${\n                  hasMargin ? \"margin-right-none\" : \"margin-right\"\n                } ${isValid ? \"bg-green-500 hover:bg-green-600 focus:bg-green-400 disabled:bg-green-300\" : \"bg-blue-500 hover:bg-blue-600 focus:bg-blue-400 disabled:bg-blue-300\"} rounded  py-2 px-4 text-white disabled:bg-blue-300`}\n                disabled={isCreating || isUpdating}\n              >\n                {isNewPost\n                  ? isCreating\n                    ? \"Creating...\"\n                    : \"Create Post\"\n                  : null}\n                {isNewPost ? null : isUpdating ? \"Updating...\" : \"Update\"}\n              </button>\n            </div>\n          </Form>\n        </div>\n      ) : (\n        <main className=\"mx-auto max-w-4xl\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"my-6 text-3xl\">{post?.title}</h1>\n            <div>\n              <button\n                onClick={() => setIsEditMode(true)}\n                className=\"mb-2 w-40 rounded bg-yellow-500 p-2 text-white hover:bg-yellow-600 focus:bg-yellow-400 disabled:bg-yellow-300\"\n              >\n                Edit mode\n              </button>\n              <br />\n              <button\n                onClick={() => handleCreateNewPost()}\n                id=\"submit-btn\"\n                className={`w-40 rounded bg-green-600 p-2 text-white`}\n              >\n                Create a new Blog\n              </button>\n            </div>\n          </div>\n          <div dangerouslySetInnerHTML={{ __html: html || \"\" }} />\n        </main>\n      )}\n    </>\n  );\n}\n"],
  "mappings": "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",
  "names": ["import_react"]
}
